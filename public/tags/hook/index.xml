<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hook on RyanLabs</title>
    <link>http://localhost:1313/portfolio/tags/hook/</link>
    <description>Recent content in Hook on RyanLabs</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 17 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/portfolio/tags/hook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Hook</title>
      <link>http://localhost:1313/portfolio/posts/developer/javascipt/react-hook/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/portfolio/posts/developer/javascipt/react-hook/</guid>
      <description>&lt;h1 id=&#34;react-hook&#34;&gt;React Hook&lt;/h1&gt;
&lt;p&gt;React의 함수형 컴포넌트는 매 렌더링마다 컴포넌트 함수를 호출합니다. 이때 React는 내부적으로 **hook 체인(혹은 hook 리스트)**를 유지하며, 각 hook 호출마다 고유한 상태(예: useState의 상태, useEffect의 효과 정보 등)를 저장합니다. 이 구조와 재호출 과정을 자세히 설명하면 다음과 같습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-hook-체인의-기본-구조&#34;&gt;1. Hook 체인의 기본 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fiber와 Hook 리스트:&lt;/strong&gt;&lt;br&gt;
React는 각 컴포넌트 인스턴스(실제로는 Fiber 노드)에 hook 정보를 저장합니다. 이 정보는 hook들이 호출된 순서대로 배열(혹은 연결 리스트)로 관리되며, 각 hook은 해당 컴포넌트의 렌더링 상태와 관련된 데이터를 보관합니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
